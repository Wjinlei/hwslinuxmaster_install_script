#!/bin/bash
# chkconfig: 2345 55 25
# description: mysql service script

### BEGIN INIT INFO
# Provides:          mysql
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: mysql
# Description:       mysql service script
### END INIT INFO

prefix={mysql_location}

NAME=mysql
PID_FILE=$prefix/mysql_data/$NAME.pid
BIN=$prefix/bin/mysqld_safe
CONFIG_FILE=$prefix/my.cnf

wait_for_pid () {
    try=0
    while test $try -lt 35 ; do
        case "$1" in
            'created')
            if [ -f "$2" ] ; then
                try=''
                break
            fi
            ;;
            'removed')
            if [ ! -f "$2" ] ; then
                try=''
                break
            fi
            ;;
        esac
        echo -n .
        try=`expr $try + 1`
        sleep 1
    done
}

start()
{
    echo -n "Starting $NAME..."
    if [ -f $PID_FILE ];then
        mPID=`cat $PID_FILE`
        isRunning=`ps ax | awk '{ print $1 }' | grep -e "^${mPID}$"`
        if [ "$isRunning" != '' ];then
            echo "$NAME (pid `pidof $NAME`) already running."
            exit 1
        fi
    fi
    $BIN --defaults-file=$CONFIG_FILE >/dev/null 2>&1 &
    if [ "$?" != 0 ] ; then
        echo " failed"
        exit 1
    fi
    wait_for_pid created $PID_FILE
    if [ -n "$try" ] ; then
        echo " failed"
        exit 1
    else
        echo " done"
    fi
}

skip-grant-tables-start()
{
    echo -n "Starting $NAME..."
    if [ -f $PID_FILE ];then
        mPID=`cat $PID_FILE`
        isRunning=`ps ax | awk '{ print $1 }' | grep -e "^${mPID}$"`
        if [ "$isRunning" != '' ];then
            echo "$NAME (pid `pidof $NAME`) already running."
            exit 1
        fi
    fi
    $BIN --defaults-file=$CONFIG_FILE --skip-grant-tables >/dev/null 2>&1 &
    if [ "$?" != 0 ] ; then
        echo " failed"
        exit 1
    fi
    wait_for_pid created $PID_FILE
    if [ -n "$try" ] ; then
        echo " failed"
        exit 1
    else
        echo " done"
    fi
}

stop()
{
    echo -n "Stoping $NAME... "
    if [ -f $PID_FILE ];then
        mPID=`cat $PID_FILE`
        isRunning=`ps ax | awk '{ print $1 }' | grep -e "^${mPID}$"`
        if [ "$isRunning" = '' ];then
            echo "$NAME is not running."
            exit 1
        fi
    else
        echo "PID file found, $NAME is not running ?"
        exit 1
    fi
    kill `cat $PID_FILE`
    wait_for_pid removed $PID_FILE
    if [ -n "$try" ] ; then
        echo " failed"
        exit 1
    else
        echo " done"
    fi
}

restart(){
    $0 stop
    $0 start
}

reload() {
    echo -n "Reload service $NAME... "
    if [ -f $PID_FILE ];then
        mPID=`cat $PID_FILE`
        isRunning=`ps ax | awk '{ print $1 }' | grep -e "^${mPID}$"`
        if [ "$isRunning" != '' ];then
            kill -HUP `cat $PID_FILE`
            echo " done"
        else
            echo "$NAME is not running, can't reload."
            exit 1
        fi
    else
        echo "$NAME is not running, can't reload."
        exit 1
    fi
}

status(){
    if [ -f $PID_FILE ];then
        mPID=`cat $PID_FILE`
        isRunning=`ps ax | awk '{ print $1 }' | grep -e "^${mPID}$"`
        if [ "$isRunning" != '' ];then
            echo "$NAME (pid `pidof $NAME`) is running."
            exit 0
        else
            echo "$NAME already stopped."
            exit 1
        fi
    else
        echo "$NAME already stopped."
        exit 1
    fi
}

set-root-password(){
    $0 stop
    $0 skip-grant-tables-start
    $prefix/bin/mysql -uroot -S /tmp/mysql.sock <<EOF
FLUSH PRIVILEGES;
GRANT ALL PRIVILEGES ON *.* to root@'127.0.0.1' IDENTIFIED BY '$1';
GRANT ALL PRIVILEGES ON *.* to root@'localhost' IDENTIFIED BY '$1';
ALTER USER root@'127.0.0.1' IDENTIFIED WITH mysql_native_password BY '$1';
ALTER USER root@'localhost' IDENTIFIED WITH mysql_native_password BY '$1';
FLUSH PRIVILEGES;
EOF
    $0 restart
}

case "$1" in
    start)
        start
        ;;
    skip-grant-tables-start)
        skip-grant-tables-start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    reload)
        reload
        ;;
    set-root-password)
        set-root-password $2
        ;;
    *)
        echo $"Usage: $0 {start|skip-grant-tables-start|stop|restart|reload|status|set-root-password}"
esac
